databases:
  - name: simr_database
    plan: free
    databaseName: simr_database
    user: user
    region: frankfurt

services:
  - type: web
    plan: free
    name: simR
    region: frankfurt
    runtime: python
    buildCommand: "./build.sh"
    startCommand: "python -m gunicorn simR.asgi:application -k uvicorn.workers.UvicornWorker"
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: simr_database
          property: connectionString # Utilise la propriété correcte ici
      - key: SECRET_KEY
        generateValue: true
      - key: WEB_CONCURRENCY
        value: 4
      - key: DJANGO_SETTINGS_MODULE
        value: simR.settings
      # - key: CELERY_BROKER_URL
      #   fromService:
      #     name: celery-redis
      #     type: redis
      #     property: connectionString

  # - type: worker # need to pay
  #   plan: free
  #   name: celery-worker
  #   runtime: python
  #   buildCommand: "pip install -r requirements.txt"
  #   startCommand: "celery --app tasks worker --loglevel info --concurrency 4"
  #   autoDeploy: false
  #   envVars:
  #     - key: CELERY_BROKER_URL
  #       fromService:
  #         name: celery-redis
  #         type: redis
  #         property: connectionString

  # - type: web
  #   plan: free
  #   name: app
  #   runtime: python
  #   buildCommand: "pip install -r requirements.txt"
  #   startCommand: "gunicorn app:app"
  #   # autoDeploy: false
  #   envVars:
  #     - key: CELERY_BROKER_URL
  #       fromService:
  #         name: celery-redis
  #         type: redis
  #         property: connectionString

  # - type: web
  #   name: flower
  #   plan: free
  #   runtime: python
  #   buildCommand: "pip install -r requirements.txt"
  #   startCommand: "celery --app flower tasks --loglevel info"
  #   # autoDeploy: false
  #   envVars:
  #     - key: CELERY_BROKER_URL
  #       fromService:
  #         type: redis
  #         name: celery-redis
  #         property: connectionString

  # - type: redis
  #   name: celery-redis
  #   plan: free
  #   # plan: starter # we choose a plan with persistence to ensure tasks are not lost upon restart
  #   maxmemoryPolicy: noeviction # recommended policy for queues
  #   ipAllowList: [] # only allow internal connections
